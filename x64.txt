Assembly Notes

Registers
Modern processors have 8 general-purpose registers. x64 processors have 64-bit registers and x86 processors have 32-bit registers. References to the different sizes are broken down by this nomenclature:

A, B, C, D registers
AX = 16 bit register
AH: H suffix = 8 bit register
AL: L suffix = 8 bit register
EAX: E prepended = 32 bit register
RAX: R prepended = 64 bit register

RAX [ EAX [ AX [ AH, AL ] ] ]
RBX [ EBX [ BX [ BH, BL ] ] ]
RCX [ ECX [ CX [ CH, CL ] ] ]
RDX [ EDX [ DX [ DH, DL ] ] ]

When a two-byte quantity is placed into DX, the update affects the value of DH, DL, and EDX.

ESI source index
EDI destination index
EBP base pointer
ESP stack pointer
EIP instruction pointer

Common Conventions
ebp + 16 = 3rd argument
ebp + 12 = 2nd argument
ebp + 8 = 1st argument
ebp + 4 = return address
ebp = old epb
ebp - 4 = 1st local var

Register Descriptions
There are many data, pointer, index, and segment registers, and one control register made up of bit flags.

AX is the primary accumulator; it is used in input/output and most arithmetic instructions. For example, in multiplication operation, one operand is stored in EAX or AX or AL register according to the size of the operand.

BX is known as the base register, as it could be used in indexed addressing.

CX is known as the count register, as the ECX, CX registers store the loop count in iterative operations.

DX is known as the data register. It is also used in input/output operations. It is also used with AX register along with DX for multiply and divide operations involving large values.

Instruction Pointer (IP) − The 16-bit IP register stores the offset address of the next instruction to be executed. IP in association with the CS register (as CS:IP) gives the complete address of the current instruction in the code segment.

Stack Pointer (SP) − The 16-bit SP register provides the offset value within the program stack. SP in association with the SS register (SS:SP) refers to be current position of data or address within the program stack.

Base Pointer (BP) − The 16-bit BP register mainly helps in referencing the parameter variables passed to a subroutine. The address in SS register is combined with the offset in BP to get the location of the parameter. BP can also be combined with DI and SI as base register for special addressing.

Source Index (SI) − It is used as source index for string operations.

Destination Index (DI) − It is used as destination index for string operations.

Flags Register - Instructions involving comparisons and mathematical calculations change the status of the flags and some other conditional instructions test the value of these status flags to take the control flow to other location.

Code Segment (CS) − It contains all the instructions to be executed. A 16-bit Code Segment register or CS register stores the starting address of the code segment.

Data Segment (DS) − It contains data, constants and work areas. A 16-bit Data Segment register or DS register stores the starting address of the data segment.

Stack Segment (SS) − It contains data and return addresses of procedures or subroutines. It is implemented as a 'stack' data structure. The Stack Segment register or SS register stores the starting address of the stack.

ES (extra segment), FS and GS - Extra segments for storing data

Flags
Overflow Flag (OF) − It indicates the overflow of a high-order bit (leftmost bit) of data after a signed arithmetic operation.

Direction Flag (DF) − It determines left or right direction for moving or comparing string data. When the DF value is 0, the string operation takes left-to-right direction and when the value is set to 1, the string operation takes right-to-left direction.

Interrupt Flag (IF) − It determines whether the external interrupts like keyboard entry, etc., are to be ignored or processed. It disables the external interrupt when the value is 0 and enables interrupts when set to 1.

Trap Flag (TF) − It allows setting the operation of the processor in single-step mode. The DEBUG program we used sets the trap flag, so we could step through the execution one instruction at a time.

Sign Flag (SF) − It shows the sign of the result of an arithmetic operation. This flag is set according to the sign of a data item following the arithmetic operation. The sign is indicated by the high-order of leftmost bit. A positive result clears the value of SF to 0 and negative result sets it to 1.

Zero Flag (ZF) − It indicates the result of an arithmetic or comparison operation. A nonzero result clears the zero flag to 0, and a zero result sets it to 1.

Auxiliary Carry Flag (AF) − It contains the carry from bit 3 to bit 4 following an arithmetic operation; used for specialized arithmetic. The AF is set when a 1-byte arithmetic operation causes a carry from bit 3 into bit 4.

Parity Flag (PF) − It indicates the total number of 1-bits in the result obtained from an arithmetic operation. An even number of 1-bits clears the parity flag to 0 and an odd number of 1-bits sets the parity flag to 1.

Carry Flag (CF) − It contains the carry of 0 or 1 from a high-order bit (leftmost) after an arithmetic operation. It also stores the contents of last bit of a shift or rotate operation.



Instructions
lea = load effective address


Resources
https://www.tutorialspoint.com/assembly_programming/assembly_registers.htm
